name: Deploy to Cloud Run

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Container image tag (default: github.sha)'
        required: false
        default: ''
      allow_unauthenticated:
        description: 'Allow unauthenticated invocations'
        required: false
        type: boolean
        default: true
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    outputs:
      service_url: ${{ steps.get-url.outputs.service_url }}
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      REGION: ${{ secrets.REGION }}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
      AR_REPO: ${{ secrets.AR_REPO }}
      WIF_PROVIDER: ${{ secrets.WIF_PROVIDER }}
      WIF_SERVICE_ACCOUNT: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      WIDGETS_XFO: ${{ secrets.WIDGETS_XFO }}
      WIDGETS_FRAME_ANCESTORS: ${{ secrets.WIDGETS_FRAME_ANCESTORS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth (Workload Identity Federation)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.WIF_SERVICE_ACCOUNT }}
        continue-on-error: false

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Validate configuration
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Configuration Validation ==="

          # Validate required configuration is available
          if [ -z "${PROJECT_ID:-}" ]; then
            echo "❌ PROJECT_ID is not configured (check secrets.PROJECT_ID)"
            exit 1
          fi

          if [ -z "${REGION:-}" ]; then
            echo "❌ REGION is not configured (check secrets.REGION)"
            exit 1
          fi

          if [ -z "${SERVICE_NAME:-}" ]; then
            echo "❌ SERVICE_NAME is not configured (check secrets.SERVICE_NAME)"
            exit 1
          fi

          if [ -z "${AR_REPO:-}" ]; then
            echo "❌ AR_REPO is not configured (check secrets.AR_REPO)"
            exit 1
          fi

          if [ -z "${WIF_PROVIDER:-}" ]; then
            echo "❌ WIF_PROVIDER is not configured (check secrets.WIF_PROVIDER)"
            exit 1
          fi

          if [ -z "${WIF_SERVICE_ACCOUNT:-}" ]; then
            echo "❌ WIF_SERVICE_ACCOUNT is not configured (check secrets.WIF_SERVICE_ACCOUNT)"
            exit 1
          fi

          echo "✅ Configuration validated successfully"
          echo "📋 Deployment Configuration:"
          echo "   PROJECT_ID=${PROJECT_ID}"
          echo "   REGION=${REGION}"
          echo "   SERVICE_NAME=${SERVICE_NAME}"
          echo "   AR_REPO=${AR_REPO}"

      - name: Ensure Artifact Registry repo exists
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Checking Artifact Registry ==="
          
          if ! gcloud artifacts repositories describe "${AR_REPO}" \
            --location="${REGION}" \
            --project="${PROJECT_ID}" >/dev/null 2>&1; then

            echo "🔨 Creating Artifact Registry repo ${AR_REPO} in ${REGION}..."
            gcloud artifacts repositories create "${AR_REPO}" \
              --repository-format=docker \
              --location="${REGION}" \
              --project="${PROJECT_ID}" \
              --description="Application containers"
          else
            echo "✅ Artifact Registry repo ${AR_REPO} already exists in ${REGION}"
          fi

      - name: Build image with Cloud Build
        id: build
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Building Container Image ==="
          
          # Determine image tag
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          if [ -z "${IMAGE_TAG}" ]; then
            IMAGE_TAG="${{ github.sha }}"
          fi

          IMAGE="${REGION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPO}/${SERVICE_NAME}:${IMAGE_TAG}"

          echo "🏗️ Building image: ${IMAGE}"
          gcloud builds submit --tag "${IMAGE}" .

          # Use modern GITHUB_OUTPUT syntax
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Deploy to Cloud Run
        id: deploy
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Deploying to Cloud Run ==="
          
          IMAGE="${{ steps.build.outputs.image }}"

          # Set default values for environment variables
          WX="${WIDGETS_XFO:-}"
          WFA="${WIDGETS_FRAME_ANCESTORS:-}"

          # Apply defaults if secrets are not set
          if [ -z "$WX" ]; then
            WX="SAMEORIGIN"
          fi

          if [ -z "$WFA" ]; then
            WFA="'self' https://*.hubspot.com"
          fi

          # Determine allow unauthenticated flag (default true)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ALLOW="${{ github.event.inputs.allow_unauthenticated }}"
            if [ -z "$ALLOW" ] || [ "$ALLOW" = "null" ]; then
              ALLOW="true"
            fi
          else
            ALLOW="true"
          fi

          AUTH_FLAG=""
          if [ "${ALLOW}" = "true" ]; then
            AUTH_FLAG="--allow-unauthenticated"
          fi

          echo "🚀 Deployment Configuration:"
          echo "   IMAGE=${IMAGE}"
          echo "   REGION=${REGION}"
          echo "   AUTH_FLAG=${AUTH_FLAG:-'(none)'}"
          echo "   WIDGETS_XFO=${WX}"
          echo "   WIDGETS_FRAME_ANCESTORS=${WFA}"

          gcloud run deploy "${SERVICE_NAME}" \
            --region="${REGION}" \
            --image="${IMAGE}" \
            --platform=managed \
            ${AUTH_FLAG} \
            --min-instances=0 \
            --max-instances=3 \
            --concurrency=80 \
            --cpu=1 \
            --memory=512Mi \
            --set-env-vars="WIDGETS_XFO=${WX},WIDGETS_FRAME_ANCESTORS=${WFA}" \
            --project="${PROJECT_ID}" \
            --timeout=300

      - name: Get service URL
        id: get-url
        shell: bash
        run: |
          set -euo pipefail

          echo "=== Getting Service URL ==="
          
          URL="$(gcloud run services describe "${SERVICE_NAME}" \
            --region="${REGION}" \
            --project="${PROJECT_ID}" \
            --format='value(status.url)')"

          echo "✅ Service deployed successfully!"
          echo "🔗 Service URL: ${URL}"

          # Use modern GITHUB_OUTPUT syntax
          echo "service_url=${URL}" >> "$GITHUB_OUTPUT"